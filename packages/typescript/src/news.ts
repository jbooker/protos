/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: news.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace news {
    export class NewsArticle extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            headline?: string;
            author?: string;
            created_at?: dependency_1.google.protobuf.Timestamp;
            updated_at?: dependency_1.google.protobuf.Timestamp;
            summary?: string;
            content?: string;
            url?: string;
            symbols?: string[];
            images?: string[];
            source?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("headline" in data && data.headline != undefined) {
                    this.headline = data.headline;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("symbols" in data && data.symbols != undefined) {
                    this.symbols = data.symbols;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get headline() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set headline(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get author() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get symbols() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set symbols(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get images() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set images(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            headline?: string;
            author?: string;
            created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            summary?: string;
            content?: string;
            url?: string;
            symbols?: string[];
            images?: string[];
            source?: string;
        }): NewsArticle {
            const message = new NewsArticle({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.headline != null) {
                message.headline = data.headline;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.created_at != null) {
                message.created_at = dependency_1.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_1.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.symbols != null) {
                message.symbols = data.symbols;
            }
            if (data.images != null) {
                message.images = data.images;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                headline?: string;
                author?: string;
                created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                summary?: string;
                content?: string;
                url?: string;
                symbols?: string[];
                images?: string[];
                source?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.headline != null) {
                data.headline = this.headline;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.symbols != null) {
                data.symbols = this.symbols;
            }
            if (this.images != null) {
                data.images = this.images;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.headline.length)
                writer.writeString(2, this.headline);
            if (this.author.length)
                writer.writeString(3, this.author);
            if (this.has_created_at)
                writer.writeMessage(4, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(5, this.updated_at, () => this.updated_at.serialize(writer));
            if (this.summary.length)
                writer.writeString(6, this.summary);
            if (this.content.length)
                writer.writeString(7, this.content);
            if (this.url.length)
                writer.writeString(8, this.url);
            if (this.symbols.length)
                writer.writeRepeatedString(9, this.symbols);
            if (this.images.length)
                writer.writeRepeatedString(10, this.images);
            if (this.source.length)
                writer.writeString(11, this.source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsArticle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsArticle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.headline = reader.readString();
                        break;
                    case 3:
                        message.author = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.summary = reader.readString();
                        break;
                    case 7:
                        message.content = reader.readString();
                        break;
                    case 8:
                        message.url = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        message.source = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsArticle {
            return NewsArticle.deserialize(bytes);
        }
    }
    export class NewsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articles?: NewsArticle[];
            symbol?: string;
            total_count?: number;
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articles" in data && data.articles != undefined) {
                    this.articles = data.articles;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get articles() {
            return pb_1.Message.getRepeatedWrapperField(this, NewsArticle, 1) as NewsArticle[];
        }
        set articles(value: NewsArticle[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            articles?: ReturnType<typeof NewsArticle.prototype.toObject>[];
            symbol?: string;
            total_count?: number;
            next_page_token?: string;
        }): NewsResponse {
            const message = new NewsResponse({});
            if (data.articles != null) {
                message.articles = data.articles.map(item => NewsArticle.fromObject(item));
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                articles?: ReturnType<typeof NewsArticle.prototype.toObject>[];
                symbol?: string;
                total_count?: number;
                next_page_token?: string;
            } = {};
            if (this.articles != null) {
                data.articles = this.articles.map((item: NewsArticle) => item.toObject());
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articles.length)
                writer.writeRepeatedMessage(1, this.articles, (item: NewsArticle) => item.serialize(writer));
            if (this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.total_count != 0)
                writer.writeInt32(3, this.total_count);
            if (this.next_page_token.length)
                writer.writeString(4, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.articles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, NewsArticle.deserialize(reader), NewsArticle));
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.total_count = reader.readInt32();
                        break;
                    case 4:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsResponse {
            return NewsResponse.deserialize(bytes);
        }
    }
    export class NewsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            symbol?: string;
            limit?: number;
            start_date?: dependency_1.google.protobuf.Timestamp;
            end_date?: dependency_1.google.protobuf.Timestamp;
            page_token?: string;
            sources?: string[];
            sort?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("sources" in data && data.sources != undefined) {
                    this.sources = data.sources;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
            }
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set start_date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_start_date() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get end_date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set end_date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_end_date() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sources() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set sources(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get sort() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sort(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            symbol?: string;
            limit?: number;
            start_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            end_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            page_token?: string;
            sources?: string[];
            sort?: string;
        }): NewsRequest {
            const message = new NewsRequest({});
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.start_date != null) {
                message.start_date = dependency_1.google.protobuf.Timestamp.fromObject(data.start_date);
            }
            if (data.end_date != null) {
                message.end_date = dependency_1.google.protobuf.Timestamp.fromObject(data.end_date);
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.sources != null) {
                message.sources = data.sources;
            }
            if (data.sort != null) {
                message.sort = data.sort;
            }
            return message;
        }
        toObject() {
            const data: {
                symbol?: string;
                limit?: number;
                start_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                end_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                page_token?: string;
                sources?: string[];
                sort?: string;
            } = {};
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date.toObject();
            }
            if (this.end_date != null) {
                data.end_date = this.end_date.toObject();
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.sources != null) {
                data.sources = this.sources;
            }
            if (this.sort != null) {
                data.sort = this.sort;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.symbol.length)
                writer.writeString(1, this.symbol);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (this.has_start_date)
                writer.writeMessage(3, this.start_date, () => this.start_date.serialize(writer));
            if (this.has_end_date)
                writer.writeMessage(4, this.end_date, () => this.end_date.serialize(writer));
            if (this.page_token.length)
                writer.writeString(5, this.page_token);
            if (this.sources.length)
                writer.writeRepeatedString(6, this.sources);
            if (this.sort.length)
                writer.writeString(7, this.sort);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.symbol = reader.readString();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.start_date, () => message.start_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.end_date, () => message.end_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.page_token = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.sort = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewsRequest {
            return NewsRequest.deserialize(bytes);
        }
    }
}
