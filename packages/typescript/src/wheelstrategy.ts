/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: wheelstrategy.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class OptionRecommendation extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4], [5], [6], [7], [9], [10]];
    constructor(data?: any[] | ({
        option_symbol?: string;
        option_type?: string;
        status?: string;
    } & (({
        strike_price?: number;
    }) | ({
        expiration_date?: dependency_1.google.protobuf.Timestamp;
    }) | ({
        premium?: number;
    }) | ({
        delta?: number;
    }) | ({
        open_interest?: number;
    }) | ({
        score?: number;
    }) | ({
        yield?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("option_symbol" in data && data.option_symbol != undefined) {
                this.option_symbol = data.option_symbol;
            }
            if ("option_type" in data && data.option_type != undefined) {
                this.option_type = data.option_type;
            }
            if ("strike_price" in data && data.strike_price != undefined) {
                this.strike_price = data.strike_price;
            }
            if ("expiration_date" in data && data.expiration_date != undefined) {
                this.expiration_date = data.expiration_date;
            }
            if ("premium" in data && data.premium != undefined) {
                this.premium = data.premium;
            }
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            if ("open_interest" in data && data.open_interest != undefined) {
                this.open_interest = data.open_interest;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("yield" in data && data.yield != undefined) {
                this.yield = data.yield;
            }
        }
    }
    get option_symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set option_symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get option_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set option_type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get strike_price() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set strike_price(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_strike_price() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get expiration_date() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
    }
    set expiration_date(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
    }
    get has_expiration_date() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get premium() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set premium(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
    }
    get has_premium() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set delta(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
    }
    get has_delta() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get open_interest() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set open_interest(value: number) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
    }
    get has_open_interest() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setOneofField(this, 9, this.#one_of_decls[5], value);
    }
    get has_score() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get yield() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set yield(value: number) {
        pb_1.Message.setOneofField(this, 10, this.#one_of_decls[6], value);
    }
    get has_yield() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get _strike_price() {
        const cases: {
            [index: number]: "none" | "strike_price";
        } = {
            0: "none",
            3: "strike_price"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _expiration_date() {
        const cases: {
            [index: number]: "none" | "expiration_date";
        } = {
            0: "none",
            4: "expiration_date"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _premium() {
        const cases: {
            [index: number]: "none" | "premium";
        } = {
            0: "none",
            5: "premium"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _delta() {
        const cases: {
            [index: number]: "none" | "delta";
        } = {
            0: "none",
            6: "delta"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _open_interest() {
        const cases: {
            [index: number]: "none" | "open_interest";
        } = {
            0: "none",
            7: "open_interest"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _score() {
        const cases: {
            [index: number]: "none" | "score";
        } = {
            0: "none",
            9: "score"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    get _yield() {
        const cases: {
            [index: number]: "none" | "yield";
        } = {
            0: "none",
            10: "yield"
        };
        return cases[pb_1.Message.computeOneofCase(this, [10])];
    }
    static fromObject(data: {
        option_symbol?: string;
        option_type?: string;
        strike_price?: number;
        expiration_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        premium?: number;
        delta?: number;
        open_interest?: number;
        status?: string;
        score?: number;
        yield?: number;
    }): OptionRecommendation {
        const message = new OptionRecommendation({});
        if (data.option_symbol != null) {
            message.option_symbol = data.option_symbol;
        }
        if (data.option_type != null) {
            message.option_type = data.option_type;
        }
        if (data.strike_price != null) {
            message.strike_price = data.strike_price;
        }
        if (data.expiration_date != null) {
            message.expiration_date = dependency_1.google.protobuf.Timestamp.fromObject(data.expiration_date);
        }
        if (data.premium != null) {
            message.premium = data.premium;
        }
        if (data.delta != null) {
            message.delta = data.delta;
        }
        if (data.open_interest != null) {
            message.open_interest = data.open_interest;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.yield != null) {
            message.yield = data.yield;
        }
        return message;
    }
    toObject() {
        const data: {
            option_symbol?: string;
            option_type?: string;
            strike_price?: number;
            expiration_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            premium?: number;
            delta?: number;
            open_interest?: number;
            status?: string;
            score?: number;
            yield?: number;
        } = {};
        if (this.option_symbol != null) {
            data.option_symbol = this.option_symbol;
        }
        if (this.option_type != null) {
            data.option_type = this.option_type;
        }
        if (this.strike_price != null) {
            data.strike_price = this.strike_price;
        }
        if (this.expiration_date != null) {
            data.expiration_date = this.expiration_date.toObject();
        }
        if (this.premium != null) {
            data.premium = this.premium;
        }
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.open_interest != null) {
            data.open_interest = this.open_interest;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.yield != null) {
            data.yield = this.yield;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.option_symbol.length)
            writer.writeString(1, this.option_symbol);
        if (this.option_type.length)
            writer.writeString(2, this.option_type);
        if (this.has_strike_price)
            writer.writeDouble(3, this.strike_price);
        if (this.has_expiration_date)
            writer.writeMessage(4, this.expiration_date, () => this.expiration_date.serialize(writer));
        if (this.has_premium)
            writer.writeDouble(5, this.premium);
        if (this.has_delta)
            writer.writeDouble(6, this.delta);
        if (this.has_open_interest)
            writer.writeDouble(7, this.open_interest);
        if (this.status.length)
            writer.writeString(8, this.status);
        if (this.has_score)
            writer.writeDouble(9, this.score);
        if (this.has_yield)
            writer.writeDouble(10, this.yield);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionRecommendation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionRecommendation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.option_symbol = reader.readString();
                    break;
                case 2:
                    message.option_type = reader.readString();
                    break;
                case 3:
                    message.strike_price = reader.readDouble();
                    break;
                case 4:
                    reader.readMessage(message.expiration_date, () => message.expiration_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.premium = reader.readDouble();
                    break;
                case 6:
                    message.delta = reader.readDouble();
                    break;
                case 7:
                    message.open_interest = reader.readDouble();
                    break;
                case 8:
                    message.status = reader.readString();
                    break;
                case 9:
                    message.score = reader.readDouble();
                    break;
                case 10:
                    message.yield = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionRecommendation {
        return OptionRecommendation.deserialize(bytes);
    }
}
export class ScoredOption extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [8]];
    constructor(data?: any[] | ({
        option_symbol?: string;
        score?: number;
    } & (({
        strike_price?: number;
    }) | ({
        expiration_date?: dependency_1.google.protobuf.Timestamp;
    }) | ({
        premium?: number;
    }) | ({
        delta?: number;
    }) | ({
        open_interest?: number;
    }) | ({
        yield?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("option_symbol" in data && data.option_symbol != undefined) {
                this.option_symbol = data.option_symbol;
            }
            if ("strike_price" in data && data.strike_price != undefined) {
                this.strike_price = data.strike_price;
            }
            if ("expiration_date" in data && data.expiration_date != undefined) {
                this.expiration_date = data.expiration_date;
            }
            if ("premium" in data && data.premium != undefined) {
                this.premium = data.premium;
            }
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            if ("open_interest" in data && data.open_interest != undefined) {
                this.open_interest = data.open_interest;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("yield" in data && data.yield != undefined) {
                this.yield = data.yield;
            }
        }
    }
    get option_symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set option_symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get strike_price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set strike_price(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_strike_price() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get expiration_date() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
    }
    set expiration_date(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
    }
    get has_expiration_date() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get premium() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set premium(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_premium() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set delta(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
    }
    get has_delta() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get open_interest() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set open_interest(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
    }
    get has_open_interest() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get yield() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set yield(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[5], value);
    }
    get has_yield() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get _strike_price() {
        const cases: {
            [index: number]: "none" | "strike_price";
        } = {
            0: "none",
            2: "strike_price"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _expiration_date() {
        const cases: {
            [index: number]: "none" | "expiration_date";
        } = {
            0: "none",
            3: "expiration_date"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _premium() {
        const cases: {
            [index: number]: "none" | "premium";
        } = {
            0: "none",
            4: "premium"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _delta() {
        const cases: {
            [index: number]: "none" | "delta";
        } = {
            0: "none",
            5: "delta"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _open_interest() {
        const cases: {
            [index: number]: "none" | "open_interest";
        } = {
            0: "none",
            6: "open_interest"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _yield() {
        const cases: {
            [index: number]: "none" | "yield";
        } = {
            0: "none",
            8: "yield"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        option_symbol?: string;
        strike_price?: number;
        expiration_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        premium?: number;
        delta?: number;
        open_interest?: number;
        score?: number;
        yield?: number;
    }): ScoredOption {
        const message = new ScoredOption({});
        if (data.option_symbol != null) {
            message.option_symbol = data.option_symbol;
        }
        if (data.strike_price != null) {
            message.strike_price = data.strike_price;
        }
        if (data.expiration_date != null) {
            message.expiration_date = dependency_1.google.protobuf.Timestamp.fromObject(data.expiration_date);
        }
        if (data.premium != null) {
            message.premium = data.premium;
        }
        if (data.delta != null) {
            message.delta = data.delta;
        }
        if (data.open_interest != null) {
            message.open_interest = data.open_interest;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.yield != null) {
            message.yield = data.yield;
        }
        return message;
    }
    toObject() {
        const data: {
            option_symbol?: string;
            strike_price?: number;
            expiration_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            premium?: number;
            delta?: number;
            open_interest?: number;
            score?: number;
            yield?: number;
        } = {};
        if (this.option_symbol != null) {
            data.option_symbol = this.option_symbol;
        }
        if (this.strike_price != null) {
            data.strike_price = this.strike_price;
        }
        if (this.expiration_date != null) {
            data.expiration_date = this.expiration_date.toObject();
        }
        if (this.premium != null) {
            data.premium = this.premium;
        }
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.open_interest != null) {
            data.open_interest = this.open_interest;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.yield != null) {
            data.yield = this.yield;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.option_symbol.length)
            writer.writeString(1, this.option_symbol);
        if (this.has_strike_price)
            writer.writeDouble(2, this.strike_price);
        if (this.has_expiration_date)
            writer.writeMessage(3, this.expiration_date, () => this.expiration_date.serialize(writer));
        if (this.has_premium)
            writer.writeDouble(4, this.premium);
        if (this.has_delta)
            writer.writeDouble(5, this.delta);
        if (this.has_open_interest)
            writer.writeDouble(6, this.open_interest);
        if (this.score != 0)
            writer.writeDouble(7, this.score);
        if (this.has_yield)
            writer.writeDouble(8, this.yield);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoredOption {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoredOption();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.option_symbol = reader.readString();
                    break;
                case 2:
                    message.strike_price = reader.readDouble();
                    break;
                case 3:
                    reader.readMessage(message.expiration_date, () => message.expiration_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 4:
                    message.premium = reader.readDouble();
                    break;
                case 5:
                    message.delta = reader.readDouble();
                    break;
                case 6:
                    message.open_interest = reader.readDouble();
                    break;
                case 7:
                    message.score = reader.readDouble();
                    break;
                case 8:
                    message.yield = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ScoredOption {
        return ScoredOption.deserialize(bytes);
    }
}
export class StrategyRecommendation extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [8]];
    constructor(data?: any[] | ({
        symbol?: string;
        note?: string;
        call_recommendation?: OptionRecommendation;
        put_recommendation?: OptionRecommendation;
        all_scored_calls?: ScoredOption[];
        all_scored_puts?: ScoredOption[];
    } & (({
        rsi?: number;
    }) | ({
        stock_price?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("rsi" in data && data.rsi != undefined) {
                this.rsi = data.rsi;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
            if ("call_recommendation" in data && data.call_recommendation != undefined) {
                this.call_recommendation = data.call_recommendation;
            }
            if ("put_recommendation" in data && data.put_recommendation != undefined) {
                this.put_recommendation = data.put_recommendation;
            }
            if ("all_scored_calls" in data && data.all_scored_calls != undefined) {
                this.all_scored_calls = data.all_scored_calls;
            }
            if ("all_scored_puts" in data && data.all_scored_puts != undefined) {
                this.all_scored_puts = data.all_scored_puts;
            }
            if ("stock_price" in data && data.stock_price != undefined) {
                this.stock_price = data.stock_price;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get rsi() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rsi(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_rsi() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get call_recommendation() {
        return pb_1.Message.getWrapperField(this, OptionRecommendation, 4) as OptionRecommendation;
    }
    set call_recommendation(value: OptionRecommendation) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_call_recommendation() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get put_recommendation() {
        return pb_1.Message.getWrapperField(this, OptionRecommendation, 5) as OptionRecommendation;
    }
    set put_recommendation(value: OptionRecommendation) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_put_recommendation() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get all_scored_calls() {
        return pb_1.Message.getRepeatedWrapperField(this, ScoredOption, 6) as ScoredOption[];
    }
    set all_scored_calls(value: ScoredOption[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get all_scored_puts() {
        return pb_1.Message.getRepeatedWrapperField(this, ScoredOption, 7) as ScoredOption[];
    }
    set all_scored_puts(value: ScoredOption[]) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get stock_price() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set stock_price(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[1], value);
    }
    get has_stock_price() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get _rsi() {
        const cases: {
            [index: number]: "none" | "rsi";
        } = {
            0: "none",
            2: "rsi"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _stock_price() {
        const cases: {
            [index: number]: "none" | "stock_price";
        } = {
            0: "none",
            8: "stock_price"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        symbol?: string;
        rsi?: number;
        note?: string;
        call_recommendation?: ReturnType<typeof OptionRecommendation.prototype.toObject>;
        put_recommendation?: ReturnType<typeof OptionRecommendation.prototype.toObject>;
        all_scored_calls?: ReturnType<typeof ScoredOption.prototype.toObject>[];
        all_scored_puts?: ReturnType<typeof ScoredOption.prototype.toObject>[];
        stock_price?: number;
    }): StrategyRecommendation {
        const message = new StrategyRecommendation({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.rsi != null) {
            message.rsi = data.rsi;
        }
        if (data.note != null) {
            message.note = data.note;
        }
        if (data.call_recommendation != null) {
            message.call_recommendation = OptionRecommendation.fromObject(data.call_recommendation);
        }
        if (data.put_recommendation != null) {
            message.put_recommendation = OptionRecommendation.fromObject(data.put_recommendation);
        }
        if (data.all_scored_calls != null) {
            message.all_scored_calls = data.all_scored_calls.map(item => ScoredOption.fromObject(item));
        }
        if (data.all_scored_puts != null) {
            message.all_scored_puts = data.all_scored_puts.map(item => ScoredOption.fromObject(item));
        }
        if (data.stock_price != null) {
            message.stock_price = data.stock_price;
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
            rsi?: number;
            note?: string;
            call_recommendation?: ReturnType<typeof OptionRecommendation.prototype.toObject>;
            put_recommendation?: ReturnType<typeof OptionRecommendation.prototype.toObject>;
            all_scored_calls?: ReturnType<typeof ScoredOption.prototype.toObject>[];
            all_scored_puts?: ReturnType<typeof ScoredOption.prototype.toObject>[];
            stock_price?: number;
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.rsi != null) {
            data.rsi = this.rsi;
        }
        if (this.note != null) {
            data.note = this.note;
        }
        if (this.call_recommendation != null) {
            data.call_recommendation = this.call_recommendation.toObject();
        }
        if (this.put_recommendation != null) {
            data.put_recommendation = this.put_recommendation.toObject();
        }
        if (this.all_scored_calls != null) {
            data.all_scored_calls = this.all_scored_calls.map((item: ScoredOption) => item.toObject());
        }
        if (this.all_scored_puts != null) {
            data.all_scored_puts = this.all_scored_puts.map((item: ScoredOption) => item.toObject());
        }
        if (this.stock_price != null) {
            data.stock_price = this.stock_price;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (this.has_rsi)
            writer.writeDouble(2, this.rsi);
        if (this.note.length)
            writer.writeString(3, this.note);
        if (this.has_call_recommendation)
            writer.writeMessage(4, this.call_recommendation, () => this.call_recommendation.serialize(writer));
        if (this.has_put_recommendation)
            writer.writeMessage(5, this.put_recommendation, () => this.put_recommendation.serialize(writer));
        if (this.all_scored_calls.length)
            writer.writeRepeatedMessage(6, this.all_scored_calls, (item: ScoredOption) => item.serialize(writer));
        if (this.all_scored_puts.length)
            writer.writeRepeatedMessage(7, this.all_scored_puts, (item: ScoredOption) => item.serialize(writer));
        if (this.has_stock_price)
            writer.writeDouble(8, this.stock_price);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StrategyRecommendation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StrategyRecommendation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                case 2:
                    message.rsi = reader.readDouble();
                    break;
                case 3:
                    message.note = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.call_recommendation, () => message.call_recommendation = OptionRecommendation.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.put_recommendation, () => message.put_recommendation = OptionRecommendation.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.all_scored_calls, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ScoredOption.deserialize(reader), ScoredOption));
                    break;
                case 7:
                    reader.readMessage(message.all_scored_puts, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ScoredOption.deserialize(reader), ScoredOption));
                    break;
                case 8:
                    message.stock_price = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StrategyRecommendation {
        return StrategyRecommendation.deserialize(bytes);
    }
}
export class StrategyRecommendations extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        recommendations?: StrategyRecommendation[];
        note?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("recommendations" in data && data.recommendations != undefined) {
                this.recommendations = data.recommendations;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
        }
    }
    get recommendations() {
        return pb_1.Message.getRepeatedWrapperField(this, StrategyRecommendation, 1) as StrategyRecommendation[];
    }
    set recommendations(value: StrategyRecommendation[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        recommendations?: ReturnType<typeof StrategyRecommendation.prototype.toObject>[];
        note?: string;
    }): StrategyRecommendations {
        const message = new StrategyRecommendations({});
        if (data.recommendations != null) {
            message.recommendations = data.recommendations.map(item => StrategyRecommendation.fromObject(item));
        }
        if (data.note != null) {
            message.note = data.note;
        }
        return message;
    }
    toObject() {
        const data: {
            recommendations?: ReturnType<typeof StrategyRecommendation.prototype.toObject>[];
            note?: string;
        } = {};
        if (this.recommendations != null) {
            data.recommendations = this.recommendations.map((item: StrategyRecommendation) => item.toObject());
        }
        if (this.note != null) {
            data.note = this.note;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.recommendations.length)
            writer.writeRepeatedMessage(1, this.recommendations, (item: StrategyRecommendation) => item.serialize(writer));
        if (this.note.length)
            writer.writeString(2, this.note);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StrategyRecommendations {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StrategyRecommendations();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.recommendations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StrategyRecommendation.deserialize(reader), StrategyRecommendation));
                    break;
                case 2:
                    message.note = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StrategyRecommendations {
        return StrategyRecommendations.deserialize(bytes);
    }
}
