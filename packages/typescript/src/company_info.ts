/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: company_info.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class CompanyInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        address?: string;
        city?: string;
        state?: string;
        country?: string;
        zip?: string;
        website?: string;
        logo?: string;
        description?: string;
        symbol?: string;
        exchange?: string;
        industry?: string;
        ceo?: string;
        sector?: string;
        employees?: number;
        keyStats?: KeyStats;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("city" in data && data.city != undefined) {
                this.city = data.city;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("country" in data && data.country != undefined) {
                this.country = data.country;
            }
            if ("zip" in data && data.zip != undefined) {
                this.zip = data.zip;
            }
            if ("website" in data && data.website != undefined) {
                this.website = data.website;
            }
            if ("logo" in data && data.logo != undefined) {
                this.logo = data.logo;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("exchange" in data && data.exchange != undefined) {
                this.exchange = data.exchange;
            }
            if ("industry" in data && data.industry != undefined) {
                this.industry = data.industry;
            }
            if ("ceo" in data && data.ceo != undefined) {
                this.ceo = data.ceo;
            }
            if ("sector" in data && data.sector != undefined) {
                this.sector = data.sector;
            }
            if ("employees" in data && data.employees != undefined) {
                this.employees = data.employees;
            }
            if ("keyStats" in data && data.keyStats != undefined) {
                this.keyStats = data.keyStats;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get city() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set city(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set state(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get country() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set country(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get zip() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set zip(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get website() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set website(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get logo() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set logo(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get exchange() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set exchange(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get industry() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set industry(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get ceo() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set ceo(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get sector() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set sector(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get employees() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set employees(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get keyStats() {
        return pb_1.Message.getWrapperField(this, KeyStats, 16) as KeyStats;
    }
    set keyStats(value: KeyStats) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_keyStats() {
        return pb_1.Message.getField(this, 16) != null;
    }
    static fromObject(data: {
        name?: string;
        address?: string;
        city?: string;
        state?: string;
        country?: string;
        zip?: string;
        website?: string;
        logo?: string;
        description?: string;
        symbol?: string;
        exchange?: string;
        industry?: string;
        ceo?: string;
        sector?: string;
        employees?: number;
        keyStats?: ReturnType<typeof KeyStats.prototype.toObject>;
    }): CompanyInfo {
        const message = new CompanyInfo({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.city != null) {
            message.city = data.city;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.country != null) {
            message.country = data.country;
        }
        if (data.zip != null) {
            message.zip = data.zip;
        }
        if (data.website != null) {
            message.website = data.website;
        }
        if (data.logo != null) {
            message.logo = data.logo;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.exchange != null) {
            message.exchange = data.exchange;
        }
        if (data.industry != null) {
            message.industry = data.industry;
        }
        if (data.ceo != null) {
            message.ceo = data.ceo;
        }
        if (data.sector != null) {
            message.sector = data.sector;
        }
        if (data.employees != null) {
            message.employees = data.employees;
        }
        if (data.keyStats != null) {
            message.keyStats = KeyStats.fromObject(data.keyStats);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            address?: string;
            city?: string;
            state?: string;
            country?: string;
            zip?: string;
            website?: string;
            logo?: string;
            description?: string;
            symbol?: string;
            exchange?: string;
            industry?: string;
            ceo?: string;
            sector?: string;
            employees?: number;
            keyStats?: ReturnType<typeof KeyStats.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.city != null) {
            data.city = this.city;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.country != null) {
            data.country = this.country;
        }
        if (this.zip != null) {
            data.zip = this.zip;
        }
        if (this.website != null) {
            data.website = this.website;
        }
        if (this.logo != null) {
            data.logo = this.logo;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.exchange != null) {
            data.exchange = this.exchange;
        }
        if (this.industry != null) {
            data.industry = this.industry;
        }
        if (this.ceo != null) {
            data.ceo = this.ceo;
        }
        if (this.sector != null) {
            data.sector = this.sector;
        }
        if (this.employees != null) {
            data.employees = this.employees;
        }
        if (this.keyStats != null) {
            data.keyStats = this.keyStats.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.address.length)
            writer.writeString(2, this.address);
        if (this.city.length)
            writer.writeString(3, this.city);
        if (this.state.length)
            writer.writeString(4, this.state);
        if (this.country.length)
            writer.writeString(5, this.country);
        if (this.zip.length)
            writer.writeString(6, this.zip);
        if (this.website.length)
            writer.writeString(7, this.website);
        if (this.logo.length)
            writer.writeString(8, this.logo);
        if (this.description.length)
            writer.writeString(9, this.description);
        if (this.symbol.length)
            writer.writeString(10, this.symbol);
        if (this.exchange.length)
            writer.writeString(11, this.exchange);
        if (this.industry.length)
            writer.writeString(12, this.industry);
        if (this.ceo.length)
            writer.writeString(13, this.ceo);
        if (this.sector.length)
            writer.writeString(14, this.sector);
        if (this.employees != 0)
            writer.writeInt32(15, this.employees);
        if (this.has_keyStats)
            writer.writeMessage(16, this.keyStats, () => this.keyStats.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompanyInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompanyInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.address = reader.readString();
                    break;
                case 3:
                    message.city = reader.readString();
                    break;
                case 4:
                    message.state = reader.readString();
                    break;
                case 5:
                    message.country = reader.readString();
                    break;
                case 6:
                    message.zip = reader.readString();
                    break;
                case 7:
                    message.website = reader.readString();
                    break;
                case 8:
                    message.logo = reader.readString();
                    break;
                case 9:
                    message.description = reader.readString();
                    break;
                case 10:
                    message.symbol = reader.readString();
                    break;
                case 11:
                    message.exchange = reader.readString();
                    break;
                case 12:
                    message.industry = reader.readString();
                    break;
                case 13:
                    message.ceo = reader.readString();
                    break;
                case 14:
                    message.sector = reader.readString();
                    break;
                case 15:
                    message.employees = reader.readInt32();
                    break;
                case 16:
                    reader.readMessage(message.keyStats, () => message.keyStats = KeyStats.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompanyInfo {
        return CompanyInfo.deserialize(bytes);
    }
}
export class KeyStats extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        marketCap?: number;
        sharesOutstanding?: number;
        beta?: number;
        week52Change?: number;
        sharesShort?: number;
        sharesShortPriorMonth?: number;
        dividendAmount?: number;
        earningsDates?: string[];
        eps?: number;
        peRatio?: number;
        forwardPE?: number;
        revenue?: number;
        pegRatio?: number;
        roe?: number;
        ebitda?: number;
        netIncome?: number;
        profitMargin?: number;
        debtToEquity?: number;
        freeCashFlow?: number;
        grossMargin?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("marketCap" in data && data.marketCap != undefined) {
                this.marketCap = data.marketCap;
            }
            if ("sharesOutstanding" in data && data.sharesOutstanding != undefined) {
                this.sharesOutstanding = data.sharesOutstanding;
            }
            if ("beta" in data && data.beta != undefined) {
                this.beta = data.beta;
            }
            if ("week52Change" in data && data.week52Change != undefined) {
                this.week52Change = data.week52Change;
            }
            if ("sharesShort" in data && data.sharesShort != undefined) {
                this.sharesShort = data.sharesShort;
            }
            if ("sharesShortPriorMonth" in data && data.sharesShortPriorMonth != undefined) {
                this.sharesShortPriorMonth = data.sharesShortPriorMonth;
            }
            if ("dividendAmount" in data && data.dividendAmount != undefined) {
                this.dividendAmount = data.dividendAmount;
            }
            if ("earningsDates" in data && data.earningsDates != undefined) {
                this.earningsDates = data.earningsDates;
            }
            if ("eps" in data && data.eps != undefined) {
                this.eps = data.eps;
            }
            if ("peRatio" in data && data.peRatio != undefined) {
                this.peRatio = data.peRatio;
            }
            if ("forwardPE" in data && data.forwardPE != undefined) {
                this.forwardPE = data.forwardPE;
            }
            if ("revenue" in data && data.revenue != undefined) {
                this.revenue = data.revenue;
            }
            if ("pegRatio" in data && data.pegRatio != undefined) {
                this.pegRatio = data.pegRatio;
            }
            if ("roe" in data && data.roe != undefined) {
                this.roe = data.roe;
            }
            if ("ebitda" in data && data.ebitda != undefined) {
                this.ebitda = data.ebitda;
            }
            if ("netIncome" in data && data.netIncome != undefined) {
                this.netIncome = data.netIncome;
            }
            if ("profitMargin" in data && data.profitMargin != undefined) {
                this.profitMargin = data.profitMargin;
            }
            if ("debtToEquity" in data && data.debtToEquity != undefined) {
                this.debtToEquity = data.debtToEquity;
            }
            if ("freeCashFlow" in data && data.freeCashFlow != undefined) {
                this.freeCashFlow = data.freeCashFlow;
            }
            if ("grossMargin" in data && data.grossMargin != undefined) {
                this.grossMargin = data.grossMargin;
            }
        }
    }
    get marketCap() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set marketCap(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get sharesOutstanding() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set sharesOutstanding(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get beta() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set beta(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get week52Change() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set week52Change(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get sharesShort() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set sharesShort(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get sharesShortPriorMonth() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set sharesShortPriorMonth(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get dividendAmount() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set dividendAmount(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get earningsDates() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
    }
    set earningsDates(value: string[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get eps() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set eps(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get peRatio() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set peRatio(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get forwardPE() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set forwardPE(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get revenue() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set revenue(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get pegRatio() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set pegRatio(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get roe() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set roe(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get ebitda() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set ebitda(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get netIncome() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set netIncome(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get profitMargin() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set profitMargin(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get debtToEquity() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set debtToEquity(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get freeCashFlow() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set freeCashFlow(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get grossMargin() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set grossMargin(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    static fromObject(data: {
        marketCap?: number;
        sharesOutstanding?: number;
        beta?: number;
        week52Change?: number;
        sharesShort?: number;
        sharesShortPriorMonth?: number;
        dividendAmount?: number;
        earningsDates?: string[];
        eps?: number;
        peRatio?: number;
        forwardPE?: number;
        revenue?: number;
        pegRatio?: number;
        roe?: number;
        ebitda?: number;
        netIncome?: number;
        profitMargin?: number;
        debtToEquity?: number;
        freeCashFlow?: number;
        grossMargin?: number;
    }): KeyStats {
        const message = new KeyStats({});
        if (data.marketCap != null) {
            message.marketCap = data.marketCap;
        }
        if (data.sharesOutstanding != null) {
            message.sharesOutstanding = data.sharesOutstanding;
        }
        if (data.beta != null) {
            message.beta = data.beta;
        }
        if (data.week52Change != null) {
            message.week52Change = data.week52Change;
        }
        if (data.sharesShort != null) {
            message.sharesShort = data.sharesShort;
        }
        if (data.sharesShortPriorMonth != null) {
            message.sharesShortPriorMonth = data.sharesShortPriorMonth;
        }
        if (data.dividendAmount != null) {
            message.dividendAmount = data.dividendAmount;
        }
        if (data.earningsDates != null) {
            message.earningsDates = data.earningsDates;
        }
        if (data.eps != null) {
            message.eps = data.eps;
        }
        if (data.peRatio != null) {
            message.peRatio = data.peRatio;
        }
        if (data.forwardPE != null) {
            message.forwardPE = data.forwardPE;
        }
        if (data.revenue != null) {
            message.revenue = data.revenue;
        }
        if (data.pegRatio != null) {
            message.pegRatio = data.pegRatio;
        }
        if (data.roe != null) {
            message.roe = data.roe;
        }
        if (data.ebitda != null) {
            message.ebitda = data.ebitda;
        }
        if (data.netIncome != null) {
            message.netIncome = data.netIncome;
        }
        if (data.profitMargin != null) {
            message.profitMargin = data.profitMargin;
        }
        if (data.debtToEquity != null) {
            message.debtToEquity = data.debtToEquity;
        }
        if (data.freeCashFlow != null) {
            message.freeCashFlow = data.freeCashFlow;
        }
        if (data.grossMargin != null) {
            message.grossMargin = data.grossMargin;
        }
        return message;
    }
    toObject() {
        const data: {
            marketCap?: number;
            sharesOutstanding?: number;
            beta?: number;
            week52Change?: number;
            sharesShort?: number;
            sharesShortPriorMonth?: number;
            dividendAmount?: number;
            earningsDates?: string[];
            eps?: number;
            peRatio?: number;
            forwardPE?: number;
            revenue?: number;
            pegRatio?: number;
            roe?: number;
            ebitda?: number;
            netIncome?: number;
            profitMargin?: number;
            debtToEquity?: number;
            freeCashFlow?: number;
            grossMargin?: number;
        } = {};
        if (this.marketCap != null) {
            data.marketCap = this.marketCap;
        }
        if (this.sharesOutstanding != null) {
            data.sharesOutstanding = this.sharesOutstanding;
        }
        if (this.beta != null) {
            data.beta = this.beta;
        }
        if (this.week52Change != null) {
            data.week52Change = this.week52Change;
        }
        if (this.sharesShort != null) {
            data.sharesShort = this.sharesShort;
        }
        if (this.sharesShortPriorMonth != null) {
            data.sharesShortPriorMonth = this.sharesShortPriorMonth;
        }
        if (this.dividendAmount != null) {
            data.dividendAmount = this.dividendAmount;
        }
        if (this.earningsDates != null) {
            data.earningsDates = this.earningsDates;
        }
        if (this.eps != null) {
            data.eps = this.eps;
        }
        if (this.peRatio != null) {
            data.peRatio = this.peRatio;
        }
        if (this.forwardPE != null) {
            data.forwardPE = this.forwardPE;
        }
        if (this.revenue != null) {
            data.revenue = this.revenue;
        }
        if (this.pegRatio != null) {
            data.pegRatio = this.pegRatio;
        }
        if (this.roe != null) {
            data.roe = this.roe;
        }
        if (this.ebitda != null) {
            data.ebitda = this.ebitda;
        }
        if (this.netIncome != null) {
            data.netIncome = this.netIncome;
        }
        if (this.profitMargin != null) {
            data.profitMargin = this.profitMargin;
        }
        if (this.debtToEquity != null) {
            data.debtToEquity = this.debtToEquity;
        }
        if (this.freeCashFlow != null) {
            data.freeCashFlow = this.freeCashFlow;
        }
        if (this.grossMargin != null) {
            data.grossMargin = this.grossMargin;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.marketCap != 0)
            writer.writeFloat(1, this.marketCap);
        if (this.sharesOutstanding != 0)
            writer.writeFloat(2, this.sharesOutstanding);
        if (this.beta != 0)
            writer.writeFloat(3, this.beta);
        if (this.week52Change != 0)
            writer.writeFloat(4, this.week52Change);
        if (this.sharesShort != 0)
            writer.writeFloat(5, this.sharesShort);
        if (this.sharesShortPriorMonth != 0)
            writer.writeFloat(6, this.sharesShortPriorMonth);
        if (this.dividendAmount != 0)
            writer.writeFloat(7, this.dividendAmount);
        if (this.earningsDates.length)
            writer.writeRepeatedString(8, this.earningsDates);
        if (this.eps != 0)
            writer.writeFloat(9, this.eps);
        if (this.peRatio != 0)
            writer.writeFloat(10, this.peRatio);
        if (this.forwardPE != 0)
            writer.writeFloat(11, this.forwardPE);
        if (this.revenue != 0)
            writer.writeFloat(12, this.revenue);
        if (this.pegRatio != 0)
            writer.writeFloat(13, this.pegRatio);
        if (this.roe != 0)
            writer.writeFloat(14, this.roe);
        if (this.ebitda != 0)
            writer.writeFloat(15, this.ebitda);
        if (this.netIncome != 0)
            writer.writeFloat(16, this.netIncome);
        if (this.profitMargin != 0)
            writer.writeFloat(18, this.profitMargin);
        if (this.debtToEquity != 0)
            writer.writeFloat(19, this.debtToEquity);
        if (this.freeCashFlow != 0)
            writer.writeFloat(20, this.freeCashFlow);
        if (this.grossMargin != 0)
            writer.writeFloat(21, this.grossMargin);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyStats {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyStats();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.marketCap = reader.readFloat();
                    break;
                case 2:
                    message.sharesOutstanding = reader.readFloat();
                    break;
                case 3:
                    message.beta = reader.readFloat();
                    break;
                case 4:
                    message.week52Change = reader.readFloat();
                    break;
                case 5:
                    message.sharesShort = reader.readFloat();
                    break;
                case 6:
                    message.sharesShortPriorMonth = reader.readFloat();
                    break;
                case 7:
                    message.dividendAmount = reader.readFloat();
                    break;
                case 8:
                    pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                    break;
                case 9:
                    message.eps = reader.readFloat();
                    break;
                case 10:
                    message.peRatio = reader.readFloat();
                    break;
                case 11:
                    message.forwardPE = reader.readFloat();
                    break;
                case 12:
                    message.revenue = reader.readFloat();
                    break;
                case 13:
                    message.pegRatio = reader.readFloat();
                    break;
                case 14:
                    message.roe = reader.readFloat();
                    break;
                case 15:
                    message.ebitda = reader.readFloat();
                    break;
                case 16:
                    message.netIncome = reader.readFloat();
                    break;
                case 18:
                    message.profitMargin = reader.readFloat();
                    break;
                case 19:
                    message.debtToEquity = reader.readFloat();
                    break;
                case 20:
                    message.freeCashFlow = reader.readFloat();
                    break;
                case 21:
                    message.grossMargin = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeyStats {
        return KeyStats.deserialize(bytes);
    }
}
export class CompanyInfoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        symbol?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        symbol?: string;
    }): CompanyInfoRequest {
        const message = new CompanyInfoRequest({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompanyInfoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompanyInfoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompanyInfoRequest {
        return CompanyInfoRequest.deserialize(bytes);
    }
}
export class CompanyInfoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        companyInfo?: CompanyInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("companyInfo" in data && data.companyInfo != undefined) {
                this.companyInfo = data.companyInfo;
            }
        }
    }
    get companyInfo() {
        return pb_1.Message.getWrapperField(this, CompanyInfo, 1) as CompanyInfo;
    }
    set companyInfo(value: CompanyInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_companyInfo() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        companyInfo?: ReturnType<typeof CompanyInfo.prototype.toObject>;
    }): CompanyInfoResponse {
        const message = new CompanyInfoResponse({});
        if (data.companyInfo != null) {
            message.companyInfo = CompanyInfo.fromObject(data.companyInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            companyInfo?: ReturnType<typeof CompanyInfo.prototype.toObject>;
        } = {};
        if (this.companyInfo != null) {
            data.companyInfo = this.companyInfo.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_companyInfo)
            writer.writeMessage(1, this.companyInfo, () => this.companyInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompanyInfoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompanyInfoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.companyInfo, () => message.companyInfo = CompanyInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompanyInfoResponse {
        return CompanyInfoResponse.deserialize(bytes);
    }
}
