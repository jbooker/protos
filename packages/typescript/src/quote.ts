/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: quote.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Quote extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        symbol?: string;
        quote?: QuoteData;
        quotes?: QuoteData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("quote" in data && data.quote != undefined) {
                this.quote = data.quote;
            }
            if ("quotes" in data && data.quotes != undefined) {
                this.quotes = data.quotes;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get quote() {
        return pb_1.Message.getWrapperField(this, QuoteData, 2) as QuoteData;
    }
    set quote(value: QuoteData) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_quote() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get quotes() {
        return pb_1.Message.getRepeatedWrapperField(this, QuoteData, 3) as QuoteData[];
    }
    set quotes(value: QuoteData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        symbol?: string;
        quote?: ReturnType<typeof QuoteData.prototype.toObject>;
        quotes?: ReturnType<typeof QuoteData.prototype.toObject>[];
    }): Quote {
        const message = new Quote({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.quote != null) {
            message.quote = QuoteData.fromObject(data.quote);
        }
        if (data.quotes != null) {
            message.quotes = data.quotes.map(item => QuoteData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
            quote?: ReturnType<typeof QuoteData.prototype.toObject>;
            quotes?: ReturnType<typeof QuoteData.prototype.toObject>[];
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.quote != null) {
            data.quote = this.quote.toObject();
        }
        if (this.quotes != null) {
            data.quotes = this.quotes.map((item: QuoteData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (this.has_quote)
            writer.writeMessage(2, this.quote, () => this.quote.serialize(writer));
        if (this.quotes.length)
            writer.writeRepeatedMessage(3, this.quotes, (item: QuoteData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quote {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quote();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.quote, () => message.quote = QuoteData.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.quotes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, QuoteData.deserialize(reader), QuoteData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Quote {
        return Quote.deserialize(bytes);
    }
}
export class QuoteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        symbol?: string;
        price?: number;
        price_change?: number;
        price_change_percent?: number;
        bid?: number;
        ask?: number;
        volume?: number;
        day_high?: number;
        day_low?: number;
        year_high?: number;
        year_low?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("price_change" in data && data.price_change != undefined) {
                this.price_change = data.price_change;
            }
            if ("price_change_percent" in data && data.price_change_percent != undefined) {
                this.price_change_percent = data.price_change_percent;
            }
            if ("bid" in data && data.bid != undefined) {
                this.bid = data.bid;
            }
            if ("ask" in data && data.ask != undefined) {
                this.ask = data.ask;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("day_high" in data && data.day_high != undefined) {
                this.day_high = data.day_high;
            }
            if ("day_low" in data && data.day_low != undefined) {
                this.day_low = data.day_low;
            }
            if ("year_high" in data && data.year_high != undefined) {
                this.year_high = data.year_high;
            }
            if ("year_low" in data && data.year_low != undefined) {
                this.year_low = data.year_low;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get price_change() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set price_change(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get price_change_percent() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set price_change_percent(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get bid() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set bid(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get ask() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set ask(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get day_high() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set day_high(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get day_low() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set day_low(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get year_high() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set year_high(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get year_low() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set year_low(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        symbol?: string;
        price?: number;
        price_change?: number;
        price_change_percent?: number;
        bid?: number;
        ask?: number;
        volume?: number;
        day_high?: number;
        day_low?: number;
        year_high?: number;
        year_low?: number;
    }): QuoteData {
        const message = new QuoteData({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.price_change != null) {
            message.price_change = data.price_change;
        }
        if (data.price_change_percent != null) {
            message.price_change_percent = data.price_change_percent;
        }
        if (data.bid != null) {
            message.bid = data.bid;
        }
        if (data.ask != null) {
            message.ask = data.ask;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.day_high != null) {
            message.day_high = data.day_high;
        }
        if (data.day_low != null) {
            message.day_low = data.day_low;
        }
        if (data.year_high != null) {
            message.year_high = data.year_high;
        }
        if (data.year_low != null) {
            message.year_low = data.year_low;
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
            price?: number;
            price_change?: number;
            price_change_percent?: number;
            bid?: number;
            ask?: number;
            volume?: number;
            day_high?: number;
            day_low?: number;
            year_high?: number;
            year_low?: number;
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.price_change != null) {
            data.price_change = this.price_change;
        }
        if (this.price_change_percent != null) {
            data.price_change_percent = this.price_change_percent;
        }
        if (this.bid != null) {
            data.bid = this.bid;
        }
        if (this.ask != null) {
            data.ask = this.ask;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.day_high != null) {
            data.day_high = this.day_high;
        }
        if (this.day_low != null) {
            data.day_low = this.day_low;
        }
        if (this.year_high != null) {
            data.year_high = this.year_high;
        }
        if (this.year_low != null) {
            data.year_low = this.year_low;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (this.price != 0)
            writer.writeDouble(2, this.price);
        if (this.price_change != 0)
            writer.writeDouble(3, this.price_change);
        if (this.price_change_percent != 0)
            writer.writeDouble(4, this.price_change_percent);
        if (this.bid != 0)
            writer.writeDouble(5, this.bid);
        if (this.ask != 0)
            writer.writeDouble(6, this.ask);
        if (this.volume != 0)
            writer.writeDouble(7, this.volume);
        if (this.day_high != 0)
            writer.writeDouble(8, this.day_high);
        if (this.day_low != 0)
            writer.writeDouble(9, this.day_low);
        if (this.year_high != 0)
            writer.writeDouble(10, this.year_high);
        if (this.year_low != 0)
            writer.writeDouble(11, this.year_low);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuoteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuoteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                case 2:
                    message.price = reader.readDouble();
                    break;
                case 3:
                    message.price_change = reader.readDouble();
                    break;
                case 4:
                    message.price_change_percent = reader.readDouble();
                    break;
                case 5:
                    message.bid = reader.readDouble();
                    break;
                case 6:
                    message.ask = reader.readDouble();
                    break;
                case 7:
                    message.volume = reader.readDouble();
                    break;
                case 8:
                    message.day_high = reader.readDouble();
                    break;
                case 9:
                    message.day_low = reader.readDouble();
                    break;
                case 10:
                    message.year_high = reader.readDouble();
                    break;
                case 11:
                    message.year_low = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): QuoteData {
        return QuoteData.deserialize(bytes);
    }
}
