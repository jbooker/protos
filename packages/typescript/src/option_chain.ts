/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: option_chain.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export enum ContractType {
    CALL = 0,
    PUT = 1
}
export class OptionChain extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        symbol?: string;
        underlying?: Underlying;
        calls?: Contract[];
        puts?: Contract[];
        interval?: number;
        isDelayed?: boolean;
        isIndex?: boolean;
        numberOfContracts?: number;
        volatility?: number;
        expirations?: string[];
        strikes?: number[];
        status?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 10, 11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
            if ("underlying" in data && data.underlying != undefined) {
                this.underlying = data.underlying;
            }
            if ("calls" in data && data.calls != undefined) {
                this.calls = data.calls;
            }
            if ("puts" in data && data.puts != undefined) {
                this.puts = data.puts;
            }
            if ("interval" in data && data.interval != undefined) {
                this.interval = data.interval;
            }
            if ("isDelayed" in data && data.isDelayed != undefined) {
                this.isDelayed = data.isDelayed;
            }
            if ("isIndex" in data && data.isIndex != undefined) {
                this.isIndex = data.isIndex;
            }
            if ("numberOfContracts" in data && data.numberOfContracts != undefined) {
                this.numberOfContracts = data.numberOfContracts;
            }
            if ("volatility" in data && data.volatility != undefined) {
                this.volatility = data.volatility;
            }
            if ("expirations" in data && data.expirations != undefined) {
                this.expirations = data.expirations;
            }
            if ("strikes" in data && data.strikes != undefined) {
                this.strikes = data.strikes;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get underlying() {
        return pb_1.Message.getWrapperField(this, Underlying, 2) as Underlying;
    }
    set underlying(value: Underlying) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_underlying() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get calls() {
        return pb_1.Message.getRepeatedWrapperField(this, Contract, 3) as Contract[];
    }
    set calls(value: Contract[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get puts() {
        return pb_1.Message.getRepeatedWrapperField(this, Contract, 4) as Contract[];
    }
    set puts(value: Contract[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get interval() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set interval(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get isDelayed() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isDelayed(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get isIndex() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set isIndex(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get numberOfContracts() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set numberOfContracts(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get volatility() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set volatility(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get expirations() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
    }
    set expirations(value: string[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get strikes() {
        return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
    }
    set strikes(value: number[]) {
        pb_1.Message.setField(this, 11, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        symbol?: string;
        underlying?: ReturnType<typeof Underlying.prototype.toObject>;
        calls?: ReturnType<typeof Contract.prototype.toObject>[];
        puts?: ReturnType<typeof Contract.prototype.toObject>[];
        interval?: number;
        isDelayed?: boolean;
        isIndex?: boolean;
        numberOfContracts?: number;
        volatility?: number;
        expirations?: string[];
        strikes?: number[];
        status?: string;
    }): OptionChain {
        const message = new OptionChain({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        if (data.underlying != null) {
            message.underlying = Underlying.fromObject(data.underlying);
        }
        if (data.calls != null) {
            message.calls = data.calls.map(item => Contract.fromObject(item));
        }
        if (data.puts != null) {
            message.puts = data.puts.map(item => Contract.fromObject(item));
        }
        if (data.interval != null) {
            message.interval = data.interval;
        }
        if (data.isDelayed != null) {
            message.isDelayed = data.isDelayed;
        }
        if (data.isIndex != null) {
            message.isIndex = data.isIndex;
        }
        if (data.numberOfContracts != null) {
            message.numberOfContracts = data.numberOfContracts;
        }
        if (data.volatility != null) {
            message.volatility = data.volatility;
        }
        if (data.expirations != null) {
            message.expirations = data.expirations;
        }
        if (data.strikes != null) {
            message.strikes = data.strikes;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
            underlying?: ReturnType<typeof Underlying.prototype.toObject>;
            calls?: ReturnType<typeof Contract.prototype.toObject>[];
            puts?: ReturnType<typeof Contract.prototype.toObject>[];
            interval?: number;
            isDelayed?: boolean;
            isIndex?: boolean;
            numberOfContracts?: number;
            volatility?: number;
            expirations?: string[];
            strikes?: number[];
            status?: string;
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        if (this.underlying != null) {
            data.underlying = this.underlying.toObject();
        }
        if (this.calls != null) {
            data.calls = this.calls.map((item: Contract) => item.toObject());
        }
        if (this.puts != null) {
            data.puts = this.puts.map((item: Contract) => item.toObject());
        }
        if (this.interval != null) {
            data.interval = this.interval;
        }
        if (this.isDelayed != null) {
            data.isDelayed = this.isDelayed;
        }
        if (this.isIndex != null) {
            data.isIndex = this.isIndex;
        }
        if (this.numberOfContracts != null) {
            data.numberOfContracts = this.numberOfContracts;
        }
        if (this.volatility != null) {
            data.volatility = this.volatility;
        }
        if (this.expirations != null) {
            data.expirations = this.expirations;
        }
        if (this.strikes != null) {
            data.strikes = this.strikes;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (this.has_underlying)
            writer.writeMessage(2, this.underlying, () => this.underlying.serialize(writer));
        if (this.calls.length)
            writer.writeRepeatedMessage(3, this.calls, (item: Contract) => item.serialize(writer));
        if (this.puts.length)
            writer.writeRepeatedMessage(4, this.puts, (item: Contract) => item.serialize(writer));
        if (this.interval != 0)
            writer.writeDouble(5, this.interval);
        if (this.isDelayed != false)
            writer.writeBool(6, this.isDelayed);
        if (this.isIndex != false)
            writer.writeBool(7, this.isIndex);
        if (this.numberOfContracts != 0)
            writer.writeDouble(8, this.numberOfContracts);
        if (this.volatility != 0)
            writer.writeDouble(9, this.volatility);
        if (this.expirations.length)
            writer.writeRepeatedString(10, this.expirations);
        if (this.strikes.length)
            writer.writePackedDouble(11, this.strikes);
        if (this.status.length)
            writer.writeString(12, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionChain {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionChain();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.underlying, () => message.underlying = Underlying.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.calls, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Contract.deserialize(reader), Contract));
                    break;
                case 4:
                    reader.readMessage(message.puts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Contract.deserialize(reader), Contract));
                    break;
                case 5:
                    message.interval = reader.readDouble();
                    break;
                case 6:
                    message.isDelayed = reader.readBool();
                    break;
                case 7:
                    message.isIndex = reader.readBool();
                    break;
                case 8:
                    message.numberOfContracts = reader.readDouble();
                    break;
                case 9:
                    message.volatility = reader.readDouble();
                    break;
                case 10:
                    pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                    break;
                case 11:
                    message.strikes = reader.readPackedDouble();
                    break;
                case 12:
                    message.status = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionChain {
        return OptionChain.deserialize(bytes);
    }
}
export class Underlying extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ask?: number;
        askSize?: number;
        bid?: number;
        bidSize?: number;
        change?: number;
        close?: number;
        delayed?: boolean;
        description?: string;
        exchangeName?: string;
        fiftyTwoWeekHigh?: number;
        fiftyTwoWeekLow?: number;
        highPrice?: number;
        last?: number;
        lowPrice?: number;
        mark?: number;
        markChange?: number;
        markPercentChange?: number;
        openPrice?: number;
        percentChange?: number;
        quoteTime?: number;
        totalVolume?: number;
        tradeTime?: number;
        volatility?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ask" in data && data.ask != undefined) {
                this.ask = data.ask;
            }
            if ("askSize" in data && data.askSize != undefined) {
                this.askSize = data.askSize;
            }
            if ("bid" in data && data.bid != undefined) {
                this.bid = data.bid;
            }
            if ("bidSize" in data && data.bidSize != undefined) {
                this.bidSize = data.bidSize;
            }
            if ("change" in data && data.change != undefined) {
                this.change = data.change;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("delayed" in data && data.delayed != undefined) {
                this.delayed = data.delayed;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("exchangeName" in data && data.exchangeName != undefined) {
                this.exchangeName = data.exchangeName;
            }
            if ("fiftyTwoWeekHigh" in data && data.fiftyTwoWeekHigh != undefined) {
                this.fiftyTwoWeekHigh = data.fiftyTwoWeekHigh;
            }
            if ("fiftyTwoWeekLow" in data && data.fiftyTwoWeekLow != undefined) {
                this.fiftyTwoWeekLow = data.fiftyTwoWeekLow;
            }
            if ("highPrice" in data && data.highPrice != undefined) {
                this.highPrice = data.highPrice;
            }
            if ("last" in data && data.last != undefined) {
                this.last = data.last;
            }
            if ("lowPrice" in data && data.lowPrice != undefined) {
                this.lowPrice = data.lowPrice;
            }
            if ("mark" in data && data.mark != undefined) {
                this.mark = data.mark;
            }
            if ("markChange" in data && data.markChange != undefined) {
                this.markChange = data.markChange;
            }
            if ("markPercentChange" in data && data.markPercentChange != undefined) {
                this.markPercentChange = data.markPercentChange;
            }
            if ("openPrice" in data && data.openPrice != undefined) {
                this.openPrice = data.openPrice;
            }
            if ("percentChange" in data && data.percentChange != undefined) {
                this.percentChange = data.percentChange;
            }
            if ("quoteTime" in data && data.quoteTime != undefined) {
                this.quoteTime = data.quoteTime;
            }
            if ("totalVolume" in data && data.totalVolume != undefined) {
                this.totalVolume = data.totalVolume;
            }
            if ("tradeTime" in data && data.tradeTime != undefined) {
                this.tradeTime = data.tradeTime;
            }
            if ("volatility" in data && data.volatility != undefined) {
                this.volatility = data.volatility;
            }
        }
    }
    get ask() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ask(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get askSize() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set askSize(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get bid() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set bid(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get bidSize() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set bidSize(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get change() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set change(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get delayed() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set delayed(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get exchangeName() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set exchangeName(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get fiftyTwoWeekHigh() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set fiftyTwoWeekHigh(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get fiftyTwoWeekLow() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set fiftyTwoWeekLow(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get highPrice() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set highPrice(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get last() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set last(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get lowPrice() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set lowPrice(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get mark() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mark(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get markChange() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set markChange(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get markPercentChange() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set markPercentChange(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get openPrice() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set openPrice(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get percentChange() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set percentChange(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get quoteTime() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set quoteTime(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get totalVolume() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set totalVolume(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get tradeTime() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set tradeTime(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get volatility() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set volatility(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    static fromObject(data: {
        ask?: number;
        askSize?: number;
        bid?: number;
        bidSize?: number;
        change?: number;
        close?: number;
        delayed?: boolean;
        description?: string;
        exchangeName?: string;
        fiftyTwoWeekHigh?: number;
        fiftyTwoWeekLow?: number;
        highPrice?: number;
        last?: number;
        lowPrice?: number;
        mark?: number;
        markChange?: number;
        markPercentChange?: number;
        openPrice?: number;
        percentChange?: number;
        quoteTime?: number;
        totalVolume?: number;
        tradeTime?: number;
        volatility?: number;
    }): Underlying {
        const message = new Underlying({});
        if (data.ask != null) {
            message.ask = data.ask;
        }
        if (data.askSize != null) {
            message.askSize = data.askSize;
        }
        if (data.bid != null) {
            message.bid = data.bid;
        }
        if (data.bidSize != null) {
            message.bidSize = data.bidSize;
        }
        if (data.change != null) {
            message.change = data.change;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.delayed != null) {
            message.delayed = data.delayed;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.exchangeName != null) {
            message.exchangeName = data.exchangeName;
        }
        if (data.fiftyTwoWeekHigh != null) {
            message.fiftyTwoWeekHigh = data.fiftyTwoWeekHigh;
        }
        if (data.fiftyTwoWeekLow != null) {
            message.fiftyTwoWeekLow = data.fiftyTwoWeekLow;
        }
        if (data.highPrice != null) {
            message.highPrice = data.highPrice;
        }
        if (data.last != null) {
            message.last = data.last;
        }
        if (data.lowPrice != null) {
            message.lowPrice = data.lowPrice;
        }
        if (data.mark != null) {
            message.mark = data.mark;
        }
        if (data.markChange != null) {
            message.markChange = data.markChange;
        }
        if (data.markPercentChange != null) {
            message.markPercentChange = data.markPercentChange;
        }
        if (data.openPrice != null) {
            message.openPrice = data.openPrice;
        }
        if (data.percentChange != null) {
            message.percentChange = data.percentChange;
        }
        if (data.quoteTime != null) {
            message.quoteTime = data.quoteTime;
        }
        if (data.totalVolume != null) {
            message.totalVolume = data.totalVolume;
        }
        if (data.tradeTime != null) {
            message.tradeTime = data.tradeTime;
        }
        if (data.volatility != null) {
            message.volatility = data.volatility;
        }
        return message;
    }
    toObject() {
        const data: {
            ask?: number;
            askSize?: number;
            bid?: number;
            bidSize?: number;
            change?: number;
            close?: number;
            delayed?: boolean;
            description?: string;
            exchangeName?: string;
            fiftyTwoWeekHigh?: number;
            fiftyTwoWeekLow?: number;
            highPrice?: number;
            last?: number;
            lowPrice?: number;
            mark?: number;
            markChange?: number;
            markPercentChange?: number;
            openPrice?: number;
            percentChange?: number;
            quoteTime?: number;
            totalVolume?: number;
            tradeTime?: number;
            volatility?: number;
        } = {};
        if (this.ask != null) {
            data.ask = this.ask;
        }
        if (this.askSize != null) {
            data.askSize = this.askSize;
        }
        if (this.bid != null) {
            data.bid = this.bid;
        }
        if (this.bidSize != null) {
            data.bidSize = this.bidSize;
        }
        if (this.change != null) {
            data.change = this.change;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.delayed != null) {
            data.delayed = this.delayed;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.exchangeName != null) {
            data.exchangeName = this.exchangeName;
        }
        if (this.fiftyTwoWeekHigh != null) {
            data.fiftyTwoWeekHigh = this.fiftyTwoWeekHigh;
        }
        if (this.fiftyTwoWeekLow != null) {
            data.fiftyTwoWeekLow = this.fiftyTwoWeekLow;
        }
        if (this.highPrice != null) {
            data.highPrice = this.highPrice;
        }
        if (this.last != null) {
            data.last = this.last;
        }
        if (this.lowPrice != null) {
            data.lowPrice = this.lowPrice;
        }
        if (this.mark != null) {
            data.mark = this.mark;
        }
        if (this.markChange != null) {
            data.markChange = this.markChange;
        }
        if (this.markPercentChange != null) {
            data.markPercentChange = this.markPercentChange;
        }
        if (this.openPrice != null) {
            data.openPrice = this.openPrice;
        }
        if (this.percentChange != null) {
            data.percentChange = this.percentChange;
        }
        if (this.quoteTime != null) {
            data.quoteTime = this.quoteTime;
        }
        if (this.totalVolume != null) {
            data.totalVolume = this.totalVolume;
        }
        if (this.tradeTime != null) {
            data.tradeTime = this.tradeTime;
        }
        if (this.volatility != null) {
            data.volatility = this.volatility;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ask != 0)
            writer.writeDouble(1, this.ask);
        if (this.askSize != 0)
            writer.writeDouble(2, this.askSize);
        if (this.bid != 0)
            writer.writeDouble(3, this.bid);
        if (this.bidSize != 0)
            writer.writeDouble(4, this.bidSize);
        if (this.change != 0)
            writer.writeDouble(5, this.change);
        if (this.close != 0)
            writer.writeDouble(6, this.close);
        if (this.delayed != false)
            writer.writeBool(7, this.delayed);
        if (this.description.length)
            writer.writeString(8, this.description);
        if (this.exchangeName.length)
            writer.writeString(9, this.exchangeName);
        if (this.fiftyTwoWeekHigh != 0)
            writer.writeDouble(10, this.fiftyTwoWeekHigh);
        if (this.fiftyTwoWeekLow != 0)
            writer.writeDouble(11, this.fiftyTwoWeekLow);
        if (this.highPrice != 0)
            writer.writeDouble(12, this.highPrice);
        if (this.last != 0)
            writer.writeDouble(13, this.last);
        if (this.lowPrice != 0)
            writer.writeDouble(14, this.lowPrice);
        if (this.mark != 0)
            writer.writeDouble(15, this.mark);
        if (this.markChange != 0)
            writer.writeDouble(16, this.markChange);
        if (this.markPercentChange != 0)
            writer.writeDouble(17, this.markPercentChange);
        if (this.openPrice != 0)
            writer.writeDouble(18, this.openPrice);
        if (this.percentChange != 0)
            writer.writeDouble(19, this.percentChange);
        if (this.quoteTime != 0)
            writer.writeDouble(20, this.quoteTime);
        if (this.totalVolume != 0)
            writer.writeDouble(21, this.totalVolume);
        if (this.tradeTime != 0)
            writer.writeDouble(22, this.tradeTime);
        if (this.volatility != 0)
            writer.writeDouble(23, this.volatility);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Underlying {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Underlying();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ask = reader.readDouble();
                    break;
                case 2:
                    message.askSize = reader.readDouble();
                    break;
                case 3:
                    message.bid = reader.readDouble();
                    break;
                case 4:
                    message.bidSize = reader.readDouble();
                    break;
                case 5:
                    message.change = reader.readDouble();
                    break;
                case 6:
                    message.close = reader.readDouble();
                    break;
                case 7:
                    message.delayed = reader.readBool();
                    break;
                case 8:
                    message.description = reader.readString();
                    break;
                case 9:
                    message.exchangeName = reader.readString();
                    break;
                case 10:
                    message.fiftyTwoWeekHigh = reader.readDouble();
                    break;
                case 11:
                    message.fiftyTwoWeekLow = reader.readDouble();
                    break;
                case 12:
                    message.highPrice = reader.readDouble();
                    break;
                case 13:
                    message.last = reader.readDouble();
                    break;
                case 14:
                    message.lowPrice = reader.readDouble();
                    break;
                case 15:
                    message.mark = reader.readDouble();
                    break;
                case 16:
                    message.markChange = reader.readDouble();
                    break;
                case 17:
                    message.markPercentChange = reader.readDouble();
                    break;
                case 18:
                    message.openPrice = reader.readDouble();
                    break;
                case 19:
                    message.percentChange = reader.readDouble();
                    break;
                case 20:
                    message.quoteTime = reader.readDouble();
                    break;
                case 21:
                    message.totalVolume = reader.readDouble();
                    break;
                case 22:
                    message.tradeTime = reader.readDouble();
                    break;
                case 23:
                    message.volatility = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Underlying {
        return Underlying.deserialize(bytes);
    }
}
export class Contract extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        putCall?: ContractType;
        strike?: number;
        currency?: string;
        lastPrice?: number;
        change?: number;
        percentChange?: number;
        openInterest?: number;
        bid?: number;
        ask?: number;
        contractSize?: string;
        expiration?: dependency_1.google.protobuf.Timestamp;
        lastTradeDate?: number;
        impliedVolatility?: number;
        inTheMoney?: boolean;
        volume?: number;
        delta?: number;
        gamma?: number;
        theta?: number;
        vega?: number;
        rho?: number;
        timeValue?: number;
        dte?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("putCall" in data && data.putCall != undefined) {
                this.putCall = data.putCall;
            }
            if ("strike" in data && data.strike != undefined) {
                this.strike = data.strike;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("lastPrice" in data && data.lastPrice != undefined) {
                this.lastPrice = data.lastPrice;
            }
            if ("change" in data && data.change != undefined) {
                this.change = data.change;
            }
            if ("percentChange" in data && data.percentChange != undefined) {
                this.percentChange = data.percentChange;
            }
            if ("openInterest" in data && data.openInterest != undefined) {
                this.openInterest = data.openInterest;
            }
            if ("bid" in data && data.bid != undefined) {
                this.bid = data.bid;
            }
            if ("ask" in data && data.ask != undefined) {
                this.ask = data.ask;
            }
            if ("contractSize" in data && data.contractSize != undefined) {
                this.contractSize = data.contractSize;
            }
            if ("expiration" in data && data.expiration != undefined) {
                this.expiration = data.expiration;
            }
            if ("lastTradeDate" in data && data.lastTradeDate != undefined) {
                this.lastTradeDate = data.lastTradeDate;
            }
            if ("impliedVolatility" in data && data.impliedVolatility != undefined) {
                this.impliedVolatility = data.impliedVolatility;
            }
            if ("inTheMoney" in data && data.inTheMoney != undefined) {
                this.inTheMoney = data.inTheMoney;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            if ("gamma" in data && data.gamma != undefined) {
                this.gamma = data.gamma;
            }
            if ("theta" in data && data.theta != undefined) {
                this.theta = data.theta;
            }
            if ("vega" in data && data.vega != undefined) {
                this.vega = data.vega;
            }
            if ("rho" in data && data.rho != undefined) {
                this.rho = data.rho;
            }
            if ("timeValue" in data && data.timeValue != undefined) {
                this.timeValue = data.timeValue;
            }
            if ("dte" in data && data.dte != undefined) {
                this.dte = data.dte;
            }
        }
    }
    get putCall() {
        return pb_1.Message.getFieldWithDefault(this, 1, ContractType.CALL) as ContractType;
    }
    set putCall(value: ContractType) {
        pb_1.Message.setField(this, 1, value);
    }
    get strike() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set strike(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get lastPrice() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set lastPrice(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get change() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set change(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get percentChange() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set percentChange(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get openInterest() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set openInterest(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get bid() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set bid(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get ask() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set ask(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get contractSize() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set contractSize(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get expiration() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
    }
    set expiration(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_expiration() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get lastTradeDate() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set lastTradeDate(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get impliedVolatility() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set impliedVolatility(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get inTheMoney() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set inTheMoney(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set delta(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get gamma() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set gamma(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get theta() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set theta(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get vega() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set vega(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get rho() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set rho(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get timeValue() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set timeValue(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get dte() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set dte(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    static fromObject(data: {
        putCall?: ContractType;
        strike?: number;
        currency?: string;
        lastPrice?: number;
        change?: number;
        percentChange?: number;
        openInterest?: number;
        bid?: number;
        ask?: number;
        contractSize?: string;
        expiration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        lastTradeDate?: number;
        impliedVolatility?: number;
        inTheMoney?: boolean;
        volume?: number;
        delta?: number;
        gamma?: number;
        theta?: number;
        vega?: number;
        rho?: number;
        timeValue?: number;
        dte?: number;
    }): Contract {
        const message = new Contract({});
        if (data.putCall != null) {
            message.putCall = data.putCall;
        }
        if (data.strike != null) {
            message.strike = data.strike;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.lastPrice != null) {
            message.lastPrice = data.lastPrice;
        }
        if (data.change != null) {
            message.change = data.change;
        }
        if (data.percentChange != null) {
            message.percentChange = data.percentChange;
        }
        if (data.openInterest != null) {
            message.openInterest = data.openInterest;
        }
        if (data.bid != null) {
            message.bid = data.bid;
        }
        if (data.ask != null) {
            message.ask = data.ask;
        }
        if (data.contractSize != null) {
            message.contractSize = data.contractSize;
        }
        if (data.expiration != null) {
            message.expiration = dependency_1.google.protobuf.Timestamp.fromObject(data.expiration);
        }
        if (data.lastTradeDate != null) {
            message.lastTradeDate = data.lastTradeDate;
        }
        if (data.impliedVolatility != null) {
            message.impliedVolatility = data.impliedVolatility;
        }
        if (data.inTheMoney != null) {
            message.inTheMoney = data.inTheMoney;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.delta != null) {
            message.delta = data.delta;
        }
        if (data.gamma != null) {
            message.gamma = data.gamma;
        }
        if (data.theta != null) {
            message.theta = data.theta;
        }
        if (data.vega != null) {
            message.vega = data.vega;
        }
        if (data.rho != null) {
            message.rho = data.rho;
        }
        if (data.timeValue != null) {
            message.timeValue = data.timeValue;
        }
        if (data.dte != null) {
            message.dte = data.dte;
        }
        return message;
    }
    toObject() {
        const data: {
            putCall?: ContractType;
            strike?: number;
            currency?: string;
            lastPrice?: number;
            change?: number;
            percentChange?: number;
            openInterest?: number;
            bid?: number;
            ask?: number;
            contractSize?: string;
            expiration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastTradeDate?: number;
            impliedVolatility?: number;
            inTheMoney?: boolean;
            volume?: number;
            delta?: number;
            gamma?: number;
            theta?: number;
            vega?: number;
            rho?: number;
            timeValue?: number;
            dte?: number;
        } = {};
        if (this.putCall != null) {
            data.putCall = this.putCall;
        }
        if (this.strike != null) {
            data.strike = this.strike;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.lastPrice != null) {
            data.lastPrice = this.lastPrice;
        }
        if (this.change != null) {
            data.change = this.change;
        }
        if (this.percentChange != null) {
            data.percentChange = this.percentChange;
        }
        if (this.openInterest != null) {
            data.openInterest = this.openInterest;
        }
        if (this.bid != null) {
            data.bid = this.bid;
        }
        if (this.ask != null) {
            data.ask = this.ask;
        }
        if (this.contractSize != null) {
            data.contractSize = this.contractSize;
        }
        if (this.expiration != null) {
            data.expiration = this.expiration.toObject();
        }
        if (this.lastTradeDate != null) {
            data.lastTradeDate = this.lastTradeDate;
        }
        if (this.impliedVolatility != null) {
            data.impliedVolatility = this.impliedVolatility;
        }
        if (this.inTheMoney != null) {
            data.inTheMoney = this.inTheMoney;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.gamma != null) {
            data.gamma = this.gamma;
        }
        if (this.theta != null) {
            data.theta = this.theta;
        }
        if (this.vega != null) {
            data.vega = this.vega;
        }
        if (this.rho != null) {
            data.rho = this.rho;
        }
        if (this.timeValue != null) {
            data.timeValue = this.timeValue;
        }
        if (this.dte != null) {
            data.dte = this.dte;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.putCall != ContractType.CALL)
            writer.writeEnum(1, this.putCall);
        if (this.strike != 0)
            writer.writeDouble(2, this.strike);
        if (this.currency.length)
            writer.writeString(3, this.currency);
        if (this.lastPrice != 0)
            writer.writeDouble(4, this.lastPrice);
        if (this.change != 0)
            writer.writeDouble(5, this.change);
        if (this.percentChange != 0)
            writer.writeDouble(6, this.percentChange);
        if (this.openInterest != 0)
            writer.writeDouble(7, this.openInterest);
        if (this.bid != 0)
            writer.writeDouble(8, this.bid);
        if (this.ask != 0)
            writer.writeDouble(9, this.ask);
        if (this.contractSize.length)
            writer.writeString(10, this.contractSize);
        if (this.has_expiration)
            writer.writeMessage(11, this.expiration, () => this.expiration.serialize(writer));
        if (this.lastTradeDate != 0)
            writer.writeDouble(12, this.lastTradeDate);
        if (this.impliedVolatility != 0)
            writer.writeDouble(13, this.impliedVolatility);
        if (this.inTheMoney != false)
            writer.writeBool(14, this.inTheMoney);
        if (this.volume != 0)
            writer.writeDouble(15, this.volume);
        if (this.delta != 0)
            writer.writeDouble(16, this.delta);
        if (this.gamma != 0)
            writer.writeDouble(17, this.gamma);
        if (this.theta != 0)
            writer.writeDouble(18, this.theta);
        if (this.vega != 0)
            writer.writeDouble(19, this.vega);
        if (this.rho != 0)
            writer.writeDouble(20, this.rho);
        if (this.timeValue != 0)
            writer.writeDouble(21, this.timeValue);
        if (this.dte != 0)
            writer.writeDouble(22, this.dte);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contract {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contract();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.putCall = reader.readEnum();
                    break;
                case 2:
                    message.strike = reader.readDouble();
                    break;
                case 3:
                    message.currency = reader.readString();
                    break;
                case 4:
                    message.lastPrice = reader.readDouble();
                    break;
                case 5:
                    message.change = reader.readDouble();
                    break;
                case 6:
                    message.percentChange = reader.readDouble();
                    break;
                case 7:
                    message.openInterest = reader.readDouble();
                    break;
                case 8:
                    message.bid = reader.readDouble();
                    break;
                case 9:
                    message.ask = reader.readDouble();
                    break;
                case 10:
                    message.contractSize = reader.readString();
                    break;
                case 11:
                    reader.readMessage(message.expiration, () => message.expiration = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 12:
                    message.lastTradeDate = reader.readDouble();
                    break;
                case 13:
                    message.impliedVolatility = reader.readDouble();
                    break;
                case 14:
                    message.inTheMoney = reader.readBool();
                    break;
                case 15:
                    message.volume = reader.readDouble();
                    break;
                case 16:
                    message.delta = reader.readDouble();
                    break;
                case 17:
                    message.gamma = reader.readDouble();
                    break;
                case 18:
                    message.theta = reader.readDouble();
                    break;
                case 19:
                    message.vega = reader.readDouble();
                    break;
                case 20:
                    message.rho = reader.readDouble();
                    break;
                case 21:
                    message.timeValue = reader.readDouble();
                    break;
                case 22:
                    message.dte = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Contract {
        return Contract.deserialize(bytes);
    }
}
export class OptionChainRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        symbol?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("symbol" in data && data.symbol != undefined) {
                this.symbol = data.symbol;
            }
        }
    }
    get symbol() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set symbol(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        symbol?: string;
    }): OptionChainRequest {
        const message = new OptionChainRequest({});
        if (data.symbol != null) {
            message.symbol = data.symbol;
        }
        return message;
    }
    toObject() {
        const data: {
            symbol?: string;
        } = {};
        if (this.symbol != null) {
            data.symbol = this.symbol;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.symbol.length)
            writer.writeString(1, this.symbol);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionChainRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionChainRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.symbol = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionChainRequest {
        return OptionChainRequest.deserialize(bytes);
    }
}
export class OptionChainResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        optionChain?: OptionChain;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("optionChain" in data && data.optionChain != undefined) {
                this.optionChain = data.optionChain;
            }
        }
    }
    get optionChain() {
        return pb_1.Message.getWrapperField(this, OptionChain, 1) as OptionChain;
    }
    set optionChain(value: OptionChain) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_optionChain() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        optionChain?: ReturnType<typeof OptionChain.prototype.toObject>;
    }): OptionChainResponse {
        const message = new OptionChainResponse({});
        if (data.optionChain != null) {
            message.optionChain = OptionChain.fromObject(data.optionChain);
        }
        return message;
    }
    toObject() {
        const data: {
            optionChain?: ReturnType<typeof OptionChain.prototype.toObject>;
        } = {};
        if (this.optionChain != null) {
            data.optionChain = this.optionChain.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_optionChain)
            writer.writeMessage(1, this.optionChain, () => this.optionChain.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionChainResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionChainResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.optionChain, () => message.optionChain = OptionChain.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionChainResponse {
        return OptionChainResponse.deserialize(bytes);
    }
}
